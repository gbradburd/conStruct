// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_multiK_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multiK");
    reader.add_event(54, 52, "end", "model_multiK");
    return reader;
}
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type, Eigen::Dynamic, Eigen::Dynamic>
admixed_covariance(const int& N,
                       const int& K,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& w_mat,
                       const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& nugget,
                       const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi,
                       const T5__& gamma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("parCov", "N", N);
        validate_non_negative_index("parCov", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parCov(N, N);
        stan::math::initialize(parCov, DUMMY_VAR__);
        stan::math::fill(parCov, DUMMY_VAR__);
        current_statement_begin__ = 4;
        validate_non_negative_index("Nug_mat", "N", N);
        validate_non_negative_index("Nug_mat", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Nug_mat(N, N);
        stan::math::initialize(Nug_mat, DUMMY_VAR__);
        stan::math::fill(Nug_mat, DUMMY_VAR__);
        current_statement_begin__ = 5;
        stan::math::assign(parCov, rep_matrix(0, N, N));
        current_statement_begin__ = 6;
        stan::math::assign(Nug_mat, diag_matrix(nugget));
        current_statement_begin__ = 7;
        for (int k = 1; k <= K; ++k) {
            current_statement_begin__ = 8;
            stan::math::assign(parCov, add(parCov, multiply(tcrossprod(to_matrix(stan::model::rvalue(w_mat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "w_mat"))), get_base1(phi, k, "phi", 1))));
        }
        current_statement_begin__ = 10;
        stan::math::assign(parCov, add(parCov, add(gamma, Nug_mat)));
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(parCov);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct admixed_covariance_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& N,
                       const int& K,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& w_mat,
                       const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& nugget,
                       const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi,
                       const T5__& gamma, std::ostream* pstream__) const {
        return admixed_covariance(N, K, w_mat, nugget, phi, gamma, pstream__);
    }
};
template <typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
make_w_matrix(const int& N,
                  const int& K,
                  const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& w, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        validate_non_negative_index("w_mat", "N", N);
        validate_non_negative_index("w_mat", "K", K);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> w_mat(N, K);
        stan::math::initialize(w_mat, DUMMY_VAR__);
        stan::math::fill(w_mat, DUMMY_VAR__);
        current_statement_begin__ = 15;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 16;
            stan::model::assign(w_mat, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        to_row_vector(get_base1(w, i, "w", 1)), 
                        "assigning variable w_mat");
        }
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(w_mat);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_w_matrix_functor__ {
    template <typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& N,
                  const int& K,
                  const std::vector<Eigen::Matrix<T2__, Eigen::Dynamic, 1> >& w, std::ostream* pstream__) const {
        return make_w_matrix(N, K, w, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_multiK
  : public stan::model::model_base_crtp<model_multiK> {
private:
        int K;
        int N;
        int L;
        matrix_d obsCov;
        double varMeanFreqs;
        matrix_d LobsCov;
        vector_d dirConPar;
public:
    model_multiK(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_multiK(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_multiK_namespace::model_multiK";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 2);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, (N + 1));
            current_statement_begin__ = 25;
            validate_non_negative_index("obsCov", "N", N);
            validate_non_negative_index("obsCov", "N", N);
            context__.validate_dims("data initialization", "obsCov", "matrix_d", context__.to_vec(N,N));
            obsCov = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("obsCov");
            pos__ = 0;
            size_t obsCov_j_2_max__ = N;
            size_t obsCov_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < obsCov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < obsCov_j_1_max__; ++j_1__) {
                    obsCov(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "varMeanFreqs", "double", context__.to_vec());
            varMeanFreqs = double(0);
            vals_r__ = context__.vals_r("varMeanFreqs");
            pos__ = 0;
            varMeanFreqs = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 29;
            validate_non_negative_index("LobsCov", "N", N);
            validate_non_negative_index("LobsCov", "N", N);
            LobsCov = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(LobsCov, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("dirConPar", "K", K);
            dirConPar = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(dirConPar, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 31;
            stan::math::assign(LobsCov, multiply(L, obsCov));
            current_statement_begin__ = 32;
            stan::math::assign(dirConPar, rep_vector(0.1, K));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 35;
            validate_non_negative_index("phi", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            validate_non_negative_index("nugget", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 38;
            validate_non_negative_index("w", "K", K);
            validate_non_negative_index("w", "N", N);
            num_params_r__ += ((K - 1) * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_multiK() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 35;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "K", K);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(K);
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.positive_ordered_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma", "double", context__.to_vec());
        double gamma(0);
        gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("nugget")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nugget missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nugget");
        pos__ = 0U;
        validate_non_negative_index("nugget", "N", N);
        context__.validate_dims("parameter initialization", "nugget", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nugget(N);
        size_t nugget_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < nugget_j_1_max__; ++j_1__) {
            nugget(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nugget);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nugget: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("w")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable w missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("w");
        pos__ = 0U;
        validate_non_negative_index("w", "K", K);
        validate_non_negative_index("w", "N", N);
        context__.validate_dims("parameter initialization", "w", "vector_d", context__.to_vec(N,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > w(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t w_j_1_max__ = K;
        size_t w_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                w[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t w_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < w_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(w[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable w: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.positive_ordered_constrain(K, lp__);
            else
                phi = in__.positive_ordered_constrain(K);
            current_statement_begin__ = 36;
            local_scalar_t__ gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.scalar_lb_constrain(0, lp__);
            else
                gamma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nugget;
            (void) nugget;  // dummy to suppress unused var warning
            if (jacobian__)
                nugget = in__.vector_lb_constrain(0, N, lp__);
            else
                nugget = in__.vector_lb_constrain(0, N);
            current_statement_begin__ = 38;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > w;
            size_t w_d_0_max__ = N;
            w.reserve(w_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < w_d_0_max__; ++d_0__) {
                if (jacobian__)
                    w.push_back(in__.simplex_constrain(K, lp__));
                else
                    w.push_back(in__.simplex_constrain(K));
            }
            // transformed parameters
            current_statement_begin__ = 41;
            validate_non_negative_index("parCov", "N", N);
            validate_non_negative_index("parCov", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parCov(N, N);
            stan::math::initialize(parCov, DUMMY_VAR__);
            stan::math::fill(parCov, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("w_mat", "N", N);
            validate_non_negative_index("w_mat", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> w_mat(N, K);
            stan::math::initialize(w_mat, DUMMY_VAR__);
            stan::math::fill(w_mat, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 43;
            stan::math::assign(w_mat, make_w_matrix(N, K, w, pstream__));
            current_statement_begin__ = 44;
            stan::math::assign(parCov, admixed_covariance(N, K, w_mat, nugget, phi, gamma, pstream__));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 41;
            size_t parCov_j_1_max__ = N;
            size_t parCov_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < parCov_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < parCov_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(parCov(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: parCov" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable parCov: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 42;
            size_t w_mat_j_1_max__ = N;
            size_t w_mat_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < w_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < w_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(w_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: w_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable w_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 47;
            lp_accum__.add(normal_log<propto__>(nugget, 0, 1));
            current_statement_begin__ = 48;
            lp_accum__.add(normal_log<propto__>(phi, 0, 1));
            current_statement_begin__ = 49;
            lp_accum__.add(normal_log<propto__>(gamma, varMeanFreqs, 0.5));
            current_statement_begin__ = 50;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 50;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(w, i, "w", 1), dirConPar));
            }
            current_statement_begin__ = 51;
            lp_accum__.add(wishart_log<propto__>(LobsCov, L, parCov));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("phi");
        names__.push_back("gamma");
        names__.push_back("nugget");
        names__.push_back("w");
        names__.push_back("parCov");
        names__.push_back("w_mat");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_multiK_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.positive_ordered_constrain(K);
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        double gamma = in__.scalar_lb_constrain(0);
        vars__.push_back(gamma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> nugget = in__.vector_lb_constrain(0, N);
        size_t nugget_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < nugget_j_1_max__; ++j_1__) {
            vars__.push_back(nugget(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > w;
        size_t w_d_0_max__ = N;
        w.reserve(w_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < w_d_0_max__; ++d_0__) {
            w.push_back(in__.simplex_constrain(K));
        }
        size_t w_j_1_max__ = K;
        size_t w_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                vars__.push_back(w[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 41;
            validate_non_negative_index("parCov", "N", N);
            validate_non_negative_index("parCov", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> parCov(N, N);
            stan::math::initialize(parCov, DUMMY_VAR__);
            stan::math::fill(parCov, DUMMY_VAR__);
            current_statement_begin__ = 42;
            validate_non_negative_index("w_mat", "N", N);
            validate_non_negative_index("w_mat", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> w_mat(N, K);
            stan::math::initialize(w_mat, DUMMY_VAR__);
            stan::math::fill(w_mat, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 43;
            stan::math::assign(w_mat, make_w_matrix(N, K, w, pstream__));
            current_statement_begin__ = 44;
            stan::math::assign(parCov, admixed_covariance(N, K, w_mat, nugget, phi, gamma, pstream__));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t parCov_j_2_max__ = N;
                size_t parCov_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < parCov_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < parCov_j_1_max__; ++j_1__) {
                        vars__.push_back(parCov(j_1__, j_2__));
                    }
                }
                size_t w_mat_j_2_max__ = K;
                size_t w_mat_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < w_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < w_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(w_mat(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_multiK";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        size_t nugget_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < nugget_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nugget" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w_j_1_max__ = K;
        size_t w_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "w" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t parCov_j_2_max__ = N;
            size_t parCov_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < parCov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < parCov_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "parCov" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t w_mat_j_2_max__ = K;
            size_t w_mat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < w_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < w_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "w_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        size_t nugget_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < nugget_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nugget" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t w_j_1_max__ = (K - 1);
        size_t w_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < w_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "w" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t parCov_j_2_max__ = N;
            size_t parCov_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < parCov_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < parCov_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "parCov" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t w_mat_j_2_max__ = K;
            size_t w_mat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < w_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < w_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "w_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_multiK_namespace::model_multiK stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
